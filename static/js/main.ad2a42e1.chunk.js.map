{"version":3,"sources":["components/Counter.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","incrementHandler","decrementHandler","deleteHandler","resetHandler","setTotal","className","onClick","map","item","index","value","key","style","fontSize","disabled","plusdisabled","minusdisabled","Navbar","total","App","useState","counterState","setCounterState","totalitems","setTotalItems","totalHandler","currentItems","console","log","arrayposition","newCounterState","splice","visible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad2a42e1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Counter = ({ state, incrementHandler, decrementHandler, deleteHandler, resetHandler, setTotal }) => {\r\n    return (\r\n        <div className=\"row mt-2\">\r\n            <div className=\"col-lg-6 m-2\">\r\n                <button className=\"btn btn-success m-2\" onClick={resetHandler}>\r\n                    <i className=\"fas fa-sync-alt\"></i>\r\n                </button>\r\n                {state.map((item, index) => {\r\n                    let className = \" badge-warning m-2\";\r\n                    if (item.value > 0) {\r\n                        className = \" badge-primary m-2\";\r\n                    }\r\n                    return (\r\n                        <div className=\"row\" key={index}>\r\n                            <div className=\"col-lg-2\">\r\n                                <span className={\"badge\" + className} style={{ fontSize: \"23px\" }}>{item.value === 0 ? \"Zero\" : item.value}</span>\r\n                            </div>\r\n                            <div className=\"col-lg-1\">\r\n                                <button disabled={item.plusdisabled} className=\"btn btn-secondary m-2\" onClick={() => incrementHandler(index)}><i className=\"fas fa-plus-circle\"></i></button>\r\n                            </div>\r\n                            <div className=\"col-lg-1\">\r\n                                <button disabled={item.minusdisabled} className=\"btn btn-info m-2\" onClick={() => decrementHandler(index)} ><i className=\"fas fa-minus-circle\"></i></button>\r\n                            </div>\r\n                            <div className=\"col-lg-1\">\r\n                                <button className=\"btn btn-danger m-2\" onClick={() => deleteHandler(index)}><i className=\"fas fa-trash\"></i></button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter\r\n","import React from 'react'\r\n\r\nconst Navbar = ({ total }) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"row m-2\">\r\n                <div className=\"col-lg-1 d-flex justify-content-center align-items-center\">\r\n                    <i className=\"fas fa-shopping-cart\"></i>\r\n                </div>\r\n                <div className=\"col-lg-6 d-flex justify-content-center align-items-center\">\r\n                    <span className=\"badge badge-pill m-2 badge-info\">{total}</span><span>Items</span>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css'\nimport Counter from './components/Counter';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  let [counterState, setCounterState] = useState(\n    [\n      {\n        value: 0,\n        plusdisabled: false,\n        minusdisabled: true,\n      },\n      {\n        value: 0,\n        plusdisabled: false,\n        minusdisabled: true,\n      },\n      {\n        value: 0,\n        plusdisabled: false,\n        minusdisabled: true,\n      },\n      {\n        value: 0,\n        plusdisabled: false,\n        minusdisabled: true,\n      },\n    ]\n  )\n  let [totalitems, setTotalItems] = useState(0);\n\n  let valueIncrementHandler = (arrayposition) => {\n    let newCounterState = counterState;\n    newCounterState[arrayposition].value++;\n    newCounterState[arrayposition].minusdisabled = false;\n    totalHandler();\n    setCounterState((counterState) => [...newCounterState])\n  }\n\n  let valueDecrementHandler = (arrayposition) => {\n    let newCounterState = counterState;\n    if (newCounterState[arrayposition].value > 0) {\n      newCounterState[arrayposition].value--\n    }\n    if (newCounterState[arrayposition].value === 0) {\n      newCounterState[arrayposition].minusdisabled = true;\n    }\n    totalHandler();\n    setCounterState((counterState) => [...newCounterState])\n  }\n\n  let deleteHandler = (arrayposition) => {\n    let newCounterState = counterState;\n    newCounterState.splice(arrayposition, 1);\n    totalHandler();\n    setCounterState((counterState) => [...newCounterState])\n  }\n\n  let totalHandler = () => {\n    let currentItems = 0;\n    counterState.map(item => {\n      currentItems += item.value;\n    })\n\n    console.log(currentItems);\n    setTotalItems(currentItems);\n  }\n\n  let resetHandler = () => {\n    setCounterState(\n      [\n        {\n          value: 0,\n          plusdisabled: false,\n          minusdisabled: true,\n          visible: true,\n        },\n        {\n          value: 0,\n          plusdisabled: false,\n          minusdisabled: true,\n          visible: true,\n        },\n        {\n          value: 0,\n          plusdisabled: false,\n          minusdisabled: true,\n          visible: true,\n        },\n        {\n          value: 0,\n          plusdisabled: false,\n          minusdisabled: true,\n          visible: true,\n        },\n      ]\n    )\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <Navbar total={totalitems} />\n      <Counter state={counterState} incrementHandler={valueIncrementHandler} decrementHandler={valueDecrementHandler} deleteHandler={deleteHandler} resetHandler={resetHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}